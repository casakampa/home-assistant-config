hue_dimmer_basic_logica:
  alias: "Dimmer: Verlichting aansturing"
  icon: mdi:lightbulb-on-outline
  mode: restart
  fields:
    media_player:
      description: "The media player to control"
      example: "media_player.lg_oled"
    brightness:
      description: "The initial brightness"
      example: "50"
    light:
      description: "The initial lights"
      example: "light.lamp_bioscoopkamer"
    area:
      description: "The initial area"
      example: "light.alle_lampen_zha_group_0x0006"
  variables:
    anchor:
      - &color_temp "{{ states('sensor.kleurtemperatuur_verlichting') }}"
      - &turn_on_entities
        service: light.turn_on
        target:
          entity_id: "{{ light }}"
  sequence:
    - alias: "Gebruik de variabele command om te bepalen welke actie er nodig is."
      choose:
        - conditions:
            - "{{ command == 'on_short_release' }}"
          sequence:
            - alias: "Routines om te bepalen op welke wijze een lamp ingeschakeld moet worden"
              choose:
                - conditions:
                    - condition: time
                      after: input_datetime.light_home_day_time
                    - condition: time
                      before: input_datetime.light_home_night_time
                  sequence:
                    - <<: *turn_on_entities
                      data:
                        brightness_pct: "{{ float(brightness) if brightness is defined else float(50) }}"
                        color_temp_kelvin: *color_temp
                - conditions:
                    - alias: "Tijdsspannes tussen ingestelde tijden"
                      or:
                        - condition: time
                          after: "06:00"
                          before: input_datetime.light_home_day_time
                        - condition: time
                          after: input_datetime.light_home_night_time
                          before: "23:59:59"
                  sequence:
                    - <<: *turn_on_entities
                      data:
                        brightness_pct: 10
                        color_temp_kelvin: *color_temp
                - conditions:
                    - alias: "Nacht"
                      condition: time
                      after: "00:00"
                      before: "06:00"
                  sequence:
                    - <<: *turn_on_entities
                      data:
                        brightness_pct: 10
                        color_temp_kelvin: 2250
              default:
                - stop: "Er was geen passend scenario voor de automatisering Hue Dimmer."
                  error: true
        - conditions:
            - "{{ command == 'on_long_release' }}"
          sequence:
            - service: light.turn_on
              target:
                entity_id: "{{ area }}"
              data:
                brightness_pct: 100
        - conditions:
            - "{{ command == 'up_short_release' }}"
          sequence:
            - <<: *turn_on_entities
              data:
                brightness_step_pct: 10
        - conditions:
            - "{{ command == 'up_hold' }}"
          sequence:
            - <<: *turn_on_entities
              data:
                color_temp_kelvin: "{{ state_attr(light, 'color_temp_kelvin') + 200 }}"
        - conditions:
            - "{{ command == 'down_short_release' }}"
          sequence:
            - <<: *turn_on_entities
              data:
                brightness_step_pct: -10
        - conditions:
            - "{{ command == 'down_hold' }}"
          sequence:
            - <<: *turn_on_entities
              data:
                color_temp_kelvin: "{{ state_attr(light, 'color_temp_kelvin') - 200 }}"
        - conditions:
            - "{{ command == 'off_short_release' }}"
          sequence:
            - service: light.turn_off
              target:
                entity_id: "{{ light }}"
        - conditions:
            - "{{ command == 'off_long_release' }}"
          sequence:
            - if:
                - "{{ is_state(area, 'on') }}"
              then:
                - parallel:
                    - alias: "Zet alle lampen in het huis uit"
                      service: light.turn_off
                      target:
                        entity_id: "{{ area }}"
                    - if:
                        - "{{ not is_state(media_player, 'off') }}"
                      then:
                        - alias: "Zet de gekozen media_player uit"
                          service: media_player.turn_off
                          target:
                            entity_id: "{{ media_player }}"
                    - if:
                        - "{{ is_state('input_boolean.play_streaming_radio', 'on') }}"
                      then:
                        - alias: "Stop streaming radio"
                          service: input_boolean.turn_off
                          target:
                            entity_id: input_boolean.play_streaming_radio
              else:
                - parallel:
                    - if:
                        - "{{ not is_state(media_player, 'off') }}"
                      then:
                        - alias: "Zet de gekozen media_player uit"
                          service: media_player.turn_off
                          target:
                            entity_id: "{{ media_player }}"
                    - if:
                        - "{{ is_state('input_boolean.play_streaming_radio', 'on') }}"
                      then:
                        - alias: "Stop streaming radio"
                          service: input_boolean.turn_off
                          target:
                            entity_id: input_boolean.play_streaming_radio

hue_dimmer_multimedia_logica:
  alias: "Dimmer: Multimedia aansturing"
  icon: mdi:lightbulb-on-outline
  mode: restart
  fields:
    media_player:
      description: "The media player to control"
      example: "media_player.chromecast_woonkamer"
    sonos_speaker:
      description: "The speaker to play the announcements on"
      example: "media_player.sonos_woonkamer"
    brightness:
      description: "The initial brightness"
      example: "50"
    light:
      description: "The initial lights"
      example: "light.lamp_bioscoopkamer"
    area:
      description: "The initial area"
      example: "light.alle_lampen_zha_group_0x0006"
  sequence:
    - if:
        - "{{ command == 'off_double_press' }}"
      then:
        - alias: "Wissel tussen modes"
          service: input_select.select_next
          target:
            entity_id: input_select.dimmer_mode
        - alias: "Vertel de actieve modus"
          service: tts.speak
          target:
            entity_id: tts.piper
          data:
            cache: true
            media_player_entity_id: >-
              {{ sonos_speaker }}
            message: >-
              Nu actief: {{ states('input_select.dimmer_mode') }}.
      else:
        - choose:
            - conditions:
                - "{{ is_state('input_select.dimmer_mode', 'Media') }}"
              sequence:
                - choose:
                    - conditions:
                        - "{{ command == 'on_short_release' }}"
                        - "{{ is_state('input_boolean.play_streaming_radio', 'off') }}"
                      sequence:
                        - alias: "Schakel streaming radio in"
                          service: input_boolean.turn_on
                          target:
                            entity_id: input_boolean.play_streaming_radio
                    - conditions:
                        - "{{ command == 'on_long_release' }}"
                      sequence:
                        - alias: "Vertel hoe laat het is"
                          service: tts.speak
                          target:
                            entity_id: tts.piper
                          data:
                            cache: false
                            media_player_entity_id: >-
                              {{ sonos_speaker }}
                            message: >-
                              {% from 'tts_functions.jinja' import dutch_time_announcement %}
                              {% set nu = now().strftime('%H:%M') %}
                              Het is {{ dutch_time_announcement(nu) }}
                    - conditions:
                        - "{{ command == 'on_double_press' }}"
                        - "{{ is_state('input_boolean.play_streaming_radio', 'on') }}"
                      sequence:
                        - service: input_select.select_next
                          target:
                            entity_id: input_select.internet_radio_streams
                        - alias: "Vertel de actieve modus"
                          service: tts.speak
                          target:
                            entity_id: tts.piper
                          data:
                            cache: true
                            media_player_entity_id: >-
                              {{ sonos_speaker }}
                            message: >-
                              Je luistert naar {{ states('input_select.internet_radio_streams') }}.
                    - conditions:
                        - "{{ command == 'up_short_release' }}"
                      sequence:
                        - alias: "Verhoog het volume"
                          service: input_number.set_value
                          target:
                            entity_id: input_number.sonos_media_volume
                          data:
                            value: "{{ min((int(states('input_number.sonos_media_volume'), 80) + 5), 80) }}"
                    - conditions:
                        - "{{ command == 'down_short_release' }}"
                      sequence:
                        - alias: "Verlaag het volume"
                          service: input_number.set_value
                          target:
                            entity_id: input_number.sonos_media_volume
                          data:
                            value: "{{ max((int(states('input_number.sonos_media_volume'), 80) - 5), 10) }}"
                    - conditions:
                        - "{{ command == 'down_long_release' }}"
                        - "{{ is_state('input_boolean.play_streaming_radio', 'on') }}"
                      sequence:
                        - alias: "Maak het mogelijk muziek te dempen en op te heffen."
                          service: input_boolean.toggle
                          target:
                            entity_id: input_boolean.mute_streaming_radio
                    - conditions:
                        - "{{ command == 'off_long_release' }}"
                        - or:
                            - "{{ is_state('input_boolean.play_streaming_radio', 'on') }}"
                            - "{{ not is_state(media_player, 'off') }}"
                      sequence:
                        - parallel:
                            - if:
                                - "{{ not is_state(media_player, 'off') }}"
                              then:
                                - alias: "Zet de gekozen media_player uit"
                                  service: media_player.turn_off
                                  target:
                                    entity_id: "{{ media_player }}"
                            - if:
                                - "{{ is_state('input_boolean.play_streaming_radio', 'on') }}"
                              then:
                                - alias: "Stop streaming radio"
                                  service: input_boolean.turn_off
                                  target:
                                    entity_id: input_boolean.play_streaming_radio
                  default:
                    - stop: "Er is geen bruikbaar command aangeleverd"
            - conditions:
                - "{{ is_state('input_select.dimmer_mode', 'Verlichting') }}"
              sequence:
                - alias: "Gebruik de variabele command om te bepalen welke actie er nodig is."
                  choose:
                    - conditions:
                        - "{{ command == 'on_short_release' }}"
                      sequence:
                        - alias: "Routines om te bepalen op welke wijze een lamp ingeschakeld moet worden"
                          choose:
                            - conditions:
                                - condition: time
                                  after: input_datetime.light_home_day_time
                                - condition: time
                                  before: input_datetime.light_home_night_time
                              sequence:
                                - <<: *turn_on_entities
                                  data:
                                    brightness_pct: "{{ float(brightness) if brightness is defined else float(50) }}"
                                    color_temp_kelvin: *color_temp
                            - conditions:
                                - alias: "Tijdsspannes tussen ingestelde tijden"
                                  or:
                                    - condition: time
                                      after: "06:00"
                                      before: input_datetime.light_home_day_time
                                    - condition: time
                                      after: input_datetime.light_home_night_time
                                      before: "23:59:59"
                              sequence:
                                - <<: *turn_on_entities
                                  data:
                                    brightness_pct: 10
                                    color_temp_kelvin: *color_temp
                            - conditions:
                                - alias: "Nacht"
                                  condition: time
                                  after: "00:00"
                                  before: "06:00"
                              sequence:
                                - <<: *turn_on_entities
                                  data:
                                    brightness_pct: 10
                                    color_temp_kelvin: 2250
                          default:
                            - stop: "Er was geen passend scenario voor de automatisering Hue Dimmer."
                              error: true
                    - conditions:
                        - "{{ command == 'on_long_release' }}"
                      sequence:
                        - service: light.turn_on
                          target:
                            entity_id: "{{ area }}"
                          data:
                            brightness_pct: 100
                    - conditions:
                        - "{{ command == 'up_short_release' }}"
                      sequence:
                        - <<: *turn_on_entities
                          data:
                            brightness_step_pct: 10
                    - conditions:
                        - "{{ command == 'up_hold' }}"
                      sequence:
                        - <<: *turn_on_entities
                          data:
                            color_temp_kelvin: "{{ state_attr(light, 'color_temp_kelvin') + 200 }}"
                    - conditions:
                        - "{{ command == 'down_short_release' }}"
                      sequence:
                        - <<: *turn_on_entities
                          data:
                            brightness_step_pct: -10
                    - conditions:
                        - "{{ command == 'down_hold' }}"
                      sequence:
                        - <<: *turn_on_entities
                          data:
                            color_temp_kelvin: "{{ state_attr(light, 'color_temp_kelvin') - 200 }}"
                    - conditions:
                        - "{{ command == 'off_short_release' }}"
                      sequence:
                        - if:
                            - "{{ command == 'off_short_release' }}"
                          then:
                            - wait_for_trigger:
                                - platform: event
                                  event_type: zha_event
                                  event_data:
                                    command: "off_double_press"
                              timeout:
                                milliseconds: 500
                              continue_on_timeout: true
                            - if:
                                - "{{ wait.trigger is none }}"
                              then:
                                - service: light.turn_off
                                  target:
                                    entity_id: "{{ light }}"
                              else:
                                - stop: "Geen geldige keuze"
                          else:
                            - stop: "Geen geldige keuze"
                    - conditions:
                        - "{{ command == 'off_long_release' }}"
                      sequence:
                        - alias: "Zet alle lampen in het huis uit"
                          service: light.turn_off
                          target:
                            entity_id: "{{ area }}"
          default:
            - stop: "Er is geen geldige keuze"
