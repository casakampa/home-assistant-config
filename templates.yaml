# Template based sensors and buttons
- sensor:
    # Bereken de buitentemperatuur op basis van de twee bronnen, wanneer beide beschikbaar zijn
    - unique_id: 6666735d-54d5-4288-b3ed-2e39c07ce654
      name: "Buitentemperatuur"
      icon: mdi:thermometer
      state: "{{ (( state_attr('weather.thuis', 'temperature') + state_attr('weather.home', 'temperature')) / 2 ) | round(1, 0) }}"
      unit_of_measurement: "Â°C"
      availability: "{{ is_number(state_attr('weather.thuis', 'temperature')) and is_number(state_attr('weather.home', 'temperature')) }}"
      device_class: temperature
      state_class: measurement
    # Monitor de bereikbaarheid van de lampen in het Zigbee netwerk
    - unique_id: 64e5a09e-ad87-4fd5-8af1-d9b24409f57e
      name: "Onbereikbare lampen"
      icon: mdi:lightbulb-alert-outline
      state: "{{ this.attributes.lampen | count }}"
      attributes:
        lampen: "{{ states.light | rejectattr('state', 'in', ['on', 'off']) | rejectattr('entity_id', 'contains', 'zha') | map(attribute='name') | list }}"

# Template binary sensor voor wekker
- binary_sensor:
    - unique_id: c6a135b3-23d6-4417-b786-e1e7b04c5b06
      name: "Wekker"
      icon: >-
        {% from 'date_functions.jinja' import vandaag %}
        {% if is_state('calendar.vakanties', 'on') %}
        mdi:island
        {% elif is_state('input_boolean.wekker_' ~ vandaag(), 'on') %}
        mdi:alarm
        {%else %}
        mdi:alarm-off
        {% endif %}
      state: >-
        {% from 'date_functions.jinja' import vandaag %}
        {{ 'on'
          if now().isoweekday() in range(6)
          and is_state('calendar.vakanties', 'off')
          and is_state('input_boolean.wekker_status', 'on')
          and is_state('input_boolean.wekker_' ~ vandaag(), 'on')
          and today_at(states('input_datetime.wektijd_' ~ vandaag())) - timedelta(minutes=int(states('input_number.wekker_wake_up_tijdsspanne'), 15)) < now() < today_at(states('input_datetime.wektijd_' ~ vandaag())) + timedelta(minutes=1)
          else 'off' }}
      attributes:
        type: >-
          {% if is_state('calendar.vakanties', 'on') %}
            Vakantie/vrije dag
          {% elif now().isoweekday() in [6, 7] %}
            Weekend
          {% else %}
            Werkdag
          {% endif %}
        description: >-
          {% if now().isoweekday() in range(6) and is_state('input_boolean.thuiswerk_status', 'on') %}
            Thuiswerken
          {% endif %}

# Z-Stack coordinator firmware sensor
- trigger:
    - trigger: state
      entity_id: sensor.z_stack_firmware_releases
  sensor:
    - unique_id: 1927a36b-0b02-4f91-bac4-67c1bd643d39
      name: "Z-Stack coordinator firmware"
      state: >-
        {% set source = 'sensor.z_stack_firmware_releases' -%}
        {# Vul de variabele 'version' met de nieuwste release van de Z-Stack coordinator firmware release van Koenkk -#}
        {% set version = states(source) -%}
        {# Vul de variabele 'prerelease' en controleer of deze versie een prerelease is (true) of niet (false) -#}
        {% set no_prerelease = is_state_attr(source, 'prerelease', false) -%}
        {# Vul de sensor met de nieuwe waarde na controle of 'version' inhoud heeft en of er sprake is van een prerelease, behoud anders de huidige staat (this.state) -#}
        {{ version.split('_')[3] if version | length > 0 and has_value(source) and no_prerelease else this.state }}
      availability: "{{ has_value(trigger.entity_id) }}"
      attributes:
        html_url: "{{ state_attr('sensor.z_stack_firmware_releases', 'html_url') }}"

# Afvalwijzer sensor
- trigger:
    - trigger: state
      entity_id: sensor.afvalwijzer_next_type
  sensor:
    - unique_id: e52ad878-27ce-42de-8fe2-03d21fbe8797
      name: "{{ this.attributes.afvalsoort }}"
      icon: mdi:delete-restore
      state: >-
        {% set next_type = states('sensor.afvalwijzer_' ~ trigger.to_state.state ) %}
        {% set collection_date = as_local(as_datetime(next_type)).date() %}
        {% set days = ['maandag', 'dinsdag', 'woensdag', 'donderdag', 'vrijdag', 'zaterdag', 'zondag' ] %}
        {% set days_until = (collection_date - now().date()).days %}
        {% if days_until <= 1 %}
          {{ (['Vandaag', 'Morgen'])[days_until] }}
        {% elif (days_until < 7 - (now().isoweekday() in [6, 7] or now().isoweekday())) %}
          {{ days[collection_date.weekday()] | title }}
        {% elif days_until <= 14 - now().isoweekday() %}
          {{ 'Volgende week ' ~ days[collection_date.weekday()] }}
        {% else %}
          {{ days[collection_date.weekday()] | title ~ ' over ' ~ (days_until / 7) | round(0, 'ceil') ~ ' weken' }}
        {% endif %}
      picture: >-
        {% set trash_type = trigger.to_state.state %}
          {{ 'https://www.maartenvandekamp.nl/afvalwijzer/' ~ ( trash_type ~ '_100.png' if (has_value('sensor.afvalwijzer_' ~ trash_type) and not is_state('sensor.afvalwijzer_' ~ trash_type, 'Geen')) else 'kliko.jpg' ) }}
      attributes:
        afvalsoort: >-
          {% set afvalsoorten = {
            'papier': 'Papier',
            'gft': 'GFT',
            'pmd': 'Plastic',
            'restafval': 'Restafval'
            } %}
            {{ afvalsoorten[trigger.to_state.state] }}
      availability: "{{ has_value(trigger.entity_id) }}"

# Bereken minimale en maximale kleurtemperatuur aan de hand van de stand van de zon ten opzichte van de horizon
- trigger:
    - trigger: state
      entity_id: sun.sun
      attribute: elevation
  sensor:
    - unique_id: 0a9bb00d-92b7-4dea-9200-549826a3d8e9
      name: "Kleurtemperatuur verlichting"
      icon: mdi:palette
      state: >-
        {% set elevation = float(state_attr('sun.sun', 'elevation'), 10) %}
        {% set max_elevation = min(float(states('sensor.max_sun_elevation'), 60), 30) %}
        {% if elevation <= -5.0 %}
          2500
        {% elif elevation >= max_elevation %}
          4000
        {% else %}
          {% set angle_factor = (elevation / max_elevation) + 1.5 %}
          {% set temp = ((elevation + 5.0) * 1500 / (max_elevation + 5.0)) * angle_factor + 2500 %}
          {{ [temp, 4000] | min | round(-2) | int  }}
        {% endif %}
      unit_of_measurement: "K"
      availability: "{{ has_value(trigger.entity_id) }}"

# Lampen met updates beschikbaar
- trigger:
    - trigger: time_pattern
      minutes: "/45"
  sensor:
    - unique_id: a105e692-cef6-4478-ac67-53ca9f0b2c87
      name: "Updatebare lampen"
      icon: mdi:update
      state: "{{ this.attributes.lampen | count }}"
      attributes:
        lampen: >-
          {% set updatable_lights = states.update
            | selectattr('attributes.device_class', '==', 'firmware')
            | selectattr('state', '==', 'on')
            | selectattr('entity_id', 'search', 'lamp|spot|lightstrip')
            | map(attribute='entity_id')
            | list %}
          {{ updatable_lights }}

# Monitor hvac_action van de thermostaat voor veranderingen
- trigger:
    - trigger: state
      entity_id: climate.otgw
      attribute: hvac_action
  binary_sensor:
    - unique_id: 1d317115-6120-4a80-92b9-ebda3042bc80
      name: "Central heating activity"
      icon: mdi:counter
      state: "{{ is_state_attr('climate.otgw', 'hvac_action', 'heating') }}"
# Maak een nieuwe template sensor voor beweging in de gang
- trigger:
    - trigger: state
      entity_id:
        - binary_sensor.hue_motion_gang_occupancy
        - binary_sensor.hue_motion_trap_occupancy
  binary_sensor:
    - unique_id: afb7cb84-af8e-423f-8562-41744ce0e8b7
      name: "Gang template motion sensor"
      icon: mdi:motion-sensor
      state: "{{ is_state('binary_sensor.hue_motion_gang_occupancy', 'on') or is_state('binary_sensor.hue_motion_trap_occupancy', 'on') }}"
      device_class: motion
      availability: "{{ (has_value('binary_sensor.hue_motion_gang_occupancy') and has_value('binary_sensor.hue_motion_trap_occupancy')) }}"
# Maak een nieuwe template sensor voor beweging in de woonkamer en keuken
- trigger:
    - trigger: state
      entity_id:
        - binary_sensor.aqara_motion_keuken
        - binary_sensor.hue_motion_woonkamer_occupancy
  binary_sensor:
    - unique_id: 6e4c8f17-9d6c-4972-815e-3e82eea161ee
      name: "Woonkamer template motion sensor"
      icon: mdi:motion-sensor
      state: "{{ is_state('binary_sensor.aqara_motion_keuken', 'on') or is_state('binary_sensor.hue_motion_woonkamer_occupancy', 'on') }}"
      device_class: motion
      availability: "{{ (has_value('binary_sensor.aqara_motion_keuken') and has_value('binary_sensor.hue_motion_woonkamer_occupancy')) }}"
# Maakt een sensor die wordt ingeschakeld wanneer de thermostaat de ingestelde maximumtemperatuur overschrijdt
- trigger:
    - trigger: state
      entity_id: climate.otgw
      attribute: temperature
  #  - trigger: state # voor testdoeleinden
  #    entity_id: input_number.thermostaat_test_temperatuur
  binary_sensor:
    - unique_id: 5080c052-00c1-4318-8d39-95efda56f34a
      name: "Overschrijding Maximumtemperatuur Thermostaat"
      state: "{{ float(state_attr(trigger.entity_id, 'temperature'), 19.5) > float(states('input_number.thermostaat_maximum_temperatuur'), 19.5) }}"
      availability: "{{ is_number(state_attr('climate.otgw', 'temperature')) and is_number(states('input_number.thermostaat_maximum_temperatuur')) }}"
      # state: "{{ float(states(trigger.entity_id), 19.5) > float(states('input_number.thermostaat_maximum_temperatuur'), 19.5) }}" # voor testdoeleinden
- trigger:
    - trigger: state
      entity_id: sensor.hue_motion_woonkamer_illuminance
  sensor:
    - unique_id: c591b645-8202-429e-96ec-628529e9958a
      name: "Drempelwaarde Woonkamer"
      state: >-
        {% set sensor = int(states(trigger.entity_id)) %}
        {% if sensor > 8 %}
        dag
        {% elif 2 <= sensor <= 8 %}
        schemer
        {% else %}
        nacht
        {% endif %}
      availability: "{{ has_value(trigger.entity_id) }}"
- trigger:
    - trigger: state
      entity_id: sensor.hue_motion_gang_illuminance
  sensor:
    - unique_id: 8963c6da-0bc3-4082-9085-cb65fa936fcc
      name: "Drempelwaarde Gang"
      state: >-
        {% set sensor = int(states(trigger.entity_id)) %}
        {% if sensor > 6 %}
        dag
        {% elif 2 <= sensor <= 6 %}
        schemer
        {% else %}
        nacht
        {% endif %}
      availability: "{{ has_value(trigger.entity_id) }}"
- trigger:
    - trigger: state
      entity_id: sensor.hue_motion_achtertuin_illuminance
  sensor:
    - unique_id: 07999eb9-08b8-4cb6-a098-349e2414fab2
      name: "Drempelwaarde Achtertuin"
      state: >-
        {% set sensor = int(states(trigger.entity_id)) %}
        {% if sensor > 25 %}
        dag
        {% elif 5 <= sensor <= 25 %}
        schemer
        {% else %}
        nacht
        {% endif %}
      availability: "{{ has_value(trigger.entity_id) }}"
# Knoppen om scripts te activeren
- button:
    - unique_id: b4ad4b16-567e-4ba4-a7c4-4a9d47650493
      name: "Maak Backup"
      icon: mdi:arrange-bring-forward
      press:
        - action: script.turn_on
          target:
            entity_id: script.backup_script
- button:
    - unique_id: 8c50d327-0425-43a5-82c3-2531d24357ec
      name: "Reset DNSWL timer"
      icon: mdi:calendar-refresh
      press:
        - action: input_datetime.set_datetime
          target:
            entity_id: input_datetime.dnswl_renew_date
          data:
            date: "{{ (now() + timedelta(days=90)).strftime('%Y-%m-%d') }}"
- button:
    - unique_id: 98f4f388-1b66-49ec-9985-e24546d1e9f4
      name: "Reset Melatonine melding"
      icon: mdi:calendar-refresh
      press:
        - action: input_datetime.set_datetime
          target:
            entity_id: input_datetime.melatonine_out_of_stock
          data:
            date: "{{ (now() + timedelta(days=90)).strftime('%Y-%m-%d') }}"
